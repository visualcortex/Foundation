cmake_minimum_required(VERSION 2.8)
project(Dream.Foundation)

# set(CMAKE_CONFIGURATION_TYPES "Debug;Release")
# set(CMAKE_STATIC_LIBRARY_PREFIX "Dream.Foundation.")
# set(CMAKE_STATIC_LIBRARY_SUFFIX "")
# set(CMAKE_STATIC_LIBRARY_SUFFIX "-vc${MSVC_VERSION}-mt.lib")
# string(REGEX REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
# string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")

if(NOT MSVC OR MSVC_VERSION LESS 1700)
	message(FATAL_ERROR "Only Microsoft Visual Studio C++ 11 compiler supported.")
else()
	add_definitions(-DUNICODE -D_UNICODE /W4)	
endif()

if(MSVC_VERSION LESS 1800)
	set(DREAM_PLATFORM_COMPILER_VERSION 110)
endif()

if(MSVC)
	if(${CMAKE_CXX_FLAGS_RELEASE} MATCHES "/MD")
		set(CMAKE_RELEASE_POSTFIX "-vc${DREAM_PLATFORM_COMPILER_VERSION}-mt")
	else()
		set(CMAKE_RELEASE_POSTFIX "-vc${DREAM_PLATFORM_COMPILER_VERSION}-mt-s")
	endif()
	if(${CMAKE_CXX_FLAGS_DEBUG} MATCHES "/MDd")
		set(CMAKE_DEBUG_POSTFIX "-vc${DREAM_PLATFORM_COMPILER_VERSION}-mt-gd")
	elseif(${CMAKE_CXX_FLAGS_DEBUG} MATCHES "/MTd")
		set(CMAKE_DEBUG_POSTFIX "-vc${DREAM_PLATFORM_COMPILER_VERSION}-mt-sgd")
	else()
		message("Only multithreaded runtime libraries supported.")
	endif()
endif()

include_directories(../inc/)
link_directories(${CMAKE_SOURCE_DIR}/../lib)

source_group("Header Files" files ${HEADERS})
source_group("Source Files" files ${SOURCES})

set(Boost_USE_STATIC_LIBS ON)
set(Boost_USE_MULTITHREADED ON)
find_package(Boost REQUIRED)
find_package(Boost COMPONENTS unit_test_framework REQUIRED)
include_directories(${Boost_INCLUDE_DIRS})

# add_subdirectory(Cryptography Cryptography)
add_subdirectory(Essential Essential)
add_subdirectory(IO IO)
# add_subdirectory(Logging Logging)
# add_subdirectory(PEBox PEBox)
# add_subdirectory(PEFile PEFile)
add_subdirectory(System System)

# add_dependencies(Cryptography Essential)
add_dependencies(Dream.Foundation.IO Dream.Foundation.Essential Dream.Foundation.System)
# add_dependencies(Logging Essential Filesystem System)
# add_dependencies(PEBox Cryptography Essential Filesystem System PEFile)
# add_dependencies(PEFile Cryptography Essential Filesystem System)
add_dependencies(Dream.Foundation.System Dream.Foundation.Essential)

enable_testing()
